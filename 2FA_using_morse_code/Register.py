import tkinter as tkimport cv2import csvfrom PIL import Imagewindow = tk.Tk()  window.title("Register")window.geometry('200x200')window.configure(background ='blue')from tkinter import *  lbl = tk.Label(window, text = "ID No.",  width = 8, height = 1, fg ="Black",  bg = "white", font = ('times', 10, ' bold ') )  lbl.place(x = 50, y = 20)   txt = tk.Entry(window,  width = 8, bg ="white",  fg ="green", font = ('times', 10, ' bold ')) txt.place(x = 120, y = 20)   lbl2 = tk.Label(window, text ="Name",  width = 8, fg ="Black", bg ="white",  height = 1, font =('times', 10, ' bold '))  lbl2.place(x = 50, y = 60)   txt2 = tk.Entry(window, width = 8,  bg ="white", fg ="Black",  font = ('times', 10, ' bold ')  ) txt2.place(x = 120, y = 60)def TakeImages():    id=(txt.get())    name =(txt2.get())     vid_cam = cv2.VideoCapture(0)    face_detector=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')        count=0    while True:        _, image_frame=vid_cam.read()        gray=cv2.cvtColor(image_frame,cv2.COLOR_BGR2GRAY)        faces=face_detector.detectMultiScale(gray, 1.3, 5)        for(x,y,w,h)in faces:            cv2.rectangle(image_frame,(x,y),(x+w,y+h),(255,0,0),2)            count+=1            print(count)            cv2.putText(image_frame, str(count), (x,y-40), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 3)            cv2.imwrite("dataset/User."+str(id)+'.'+str(count)+".jpg",gray[y:y+h,x:x+w])            cv2.imshow('frame',image_frame)        if cv2.waitKey(100)& 0xFF == ord('q'):            #TrainImages()            break        elif count>120:            break    vid_cam.release()    cv2.destroyAllWindows()    res = "Images Saved for ID : " + id +" Name : "+ name    row = [id, name]    with open('UserDetails.csv', 'a+') as csvFile:        writer = csv.writer(csvFile)        writer.writerow(row)                csvFile.close()    TrainImages()    def TrainImages():    import cv2, os    import numpy as np    recognizer = cv2.face.LBPHFaceRecognizer_create()    detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml");    def getImagesAndLabels(path):        # Get all file path        imagePaths = [os.path.join(path,f) for f in os.listdir(path)]                 # Initialize empty face sample        faceSamples=[]                # Initialize empty id        ids = []        # Loop all the file path        for imagePath in imagePaths:            # Get the image and convert it to grayscale            PIL_img = Image.open(imagePath).convert('L')            # PIL image to numpy array            img_numpy = np.array(PIL_img,'uint8')            # Get the image id            id = int(os.path.split(imagePath)[-1].split(".")[1])            print(id)            # Get the face from the training images            faces = detector.detectMultiScale(img_numpy)            # Loop for each face, append to their respective ID            for (x,y,w,h) in faces:                # Add the image to face samples                faceSamples.append(img_numpy[y:y+h,x:x+w])                # Add the ID to IDs                ids.append(id)        # Pass the face array and IDs array        return faceSamples,ids    # Get the faces and IDs    faces,ids = getImagesAndLabels('dataset')    # Train the model using the faces and IDs    recognizer.train(faces, np.array(ids))    # Save the model into trainer.yml    recognizer.write('trainer.yml')    print("Training Done")    register()   def register():    root=Tk()    root.geometry('150x50')    root.title("Register")    lbl=Label(root, text="Register Successful")        lbl.pack()    root.mainloop()                takeImg = tk.Button(window, text ="Submit",  command = TakeImages, fg ="white", bg ="blue",  width = 8, height = 1, activebackground = "Red",  font =('times', 10, ' bold ')) takeImg.place(x = 50, y = 100)quitWindow = tk.Button(window, text ="Quit",  command = window.destroy, fg ="white", bg ="blue",  width = 8, height = 1, activebackground = "Red",  font =('times', 10, ' bold ')) quitWindow.place(x = 120, y = 100)#label.pack()window.mainloop()   